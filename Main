import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';

// --- GLOBALS PROVIDED BY THE ENVIRONMENT ---
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-issue-tracker';
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

// --- Helper Functions & Hooks ---
const getStatusClass = (status) => {
    switch (status) {
        case 'Open': return 'bg-red-500 text-white';
        case 'Work In Progress': return 'bg-yellow-500 text-gray-800';
        case 'Closed': return 'bg-green-600 text-white';
        default: return 'bg-gray-400 text-white';
    }
};

const getPriorityClass = (priority) => {
    switch (priority) {
        case 'High': return 'text-red-600 font-semibold';
        case 'Medium': return 'text-yellow-600 font-semibold';
        case 'Low': return 'text-green-600 font-semibold';
        default: return 'text-gray-500';
    }
};

const getDueDateInfo = (dueDateString) => {
    if (!dueDateString) return { className: 'text-gray-500', isPastDue: false, days: null };

    const now = new Date();
    const dueDate = new Date(dueDateString);
    now.setHours(0, 0, 0, 0);
    dueDate.setHours(0, 0, 0, 0);

    const diffTime = dueDate.getTime() - now.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    if (diffDays < 0) {
        return { className: 'bg-red-600 text-white px-2 py-0.5 text-xs font-semibold rounded-full', isPastDue: true, days: diffDays };
    }
    if (diffDays <= 7) {
        return { className: 'text-red-600 font-semibold', isPastDue: false, days: diffDays };
    }
    if (diffDays <= 30) {
        return { className: 'text-yellow-600 font-semibold', isPastDue: false, days: diffDays };
    }
    return { className: 'text-green-600 font-semibold', isPastDue: false, days: diffDays };
};

const getAssignedToClass = (name, assignedToList) => {
    const person = assignedToList.find(p => p.name === name);
    if (person && person.email) {
        return 'text-blue-600 font-semibold';
    }
    return 'text-gray-900';
};


const useMediaQuery = (query) => {
    const [matches, setMatches] = useState(false);
    useEffect(() => {
        const media = window.matchMedia(query);
        if (media.matches !== matches) {
            setMatches(media.matches);
        }
        const listener = () => setMatches(media.matches);
        window.addEventListener('resize', listener);
        return () => window.removeEventListener('resize', listener);
    }, [matches, query]);
    return matches;
};


// --- Child Components ---

const CopyLinkButton = ({ issueId }) => {
    const [copySuccess, setCopySuccess] = useState('');

    const copyToClipboard = (e) => {
        e.stopPropagation(); // Prevents card click when copying from card view
        const url = `${window.location.origin}${window.location.pathname}#issue/${issueId}`;
        const textField = document.createElement('textarea');
        textField.innerText = url;
        document.body.appendChild(textField);
        textField.select();
        document.execCommand('copy');
        textField.remove();

        setCopySuccess(url);
        setTimeout(() => setCopySuccess(''), 3000);
    };

    return (
        <div className="relative">
            <button onClick={copyToClipboard} className="p-2 rounded-full hover:bg-gray-200 text-gray-600">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" /></svg>
            </button>
            {copySuccess && (
                <div className="absolute top-full right-0 mt-2 bg-gray-800 text-white text-xs px-3 py-2 rounded shadow-lg z-50 w-max">
                    <p className="font-bold">Copied!</p>
                    <p className="font-mono break-all">{copySuccess}</p>
                </div>
            )}
        </div>
    );
};


const LoginScreen = ({ auth, firebase }) => {
    const [isSignUp, setIsSignUp] = useState(false);
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');

    const handleGoogleSignIn = () => {
        const provider = new firebase.GoogleAuthProvider();
        firebase.signInWithPopup(auth, provider).catch(err => setError(err.message));
    };

    const handleEmailAuth = (e) => {
        e.preventDefault();
        setError('');
        if (isSignUp) {
            firebase.createUserWithEmailAndPassword(auth, email, password)
                .catch(err => setError(err.message));
        } else {
            firebase.signInWithEmailAndPassword(auth, email, password)
                .catch(err => setError(err.message));
        }
    };
    
    return (
        <div className="flex items-center justify-center min-h-screen bg-gray-100 font-sans p-4">
            <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow-md">
                <h2 className="text-2xl font-bold text-center text-gray-800">
                    {isSignUp ? 'Create an Account' : 'Sign In'}
                </h2>
                
                <button onClick={handleGoogleSignIn} className="w-full flex justify-center items-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                    <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true"><path fillRule="evenodd" d="M22.05 12.18c0-.77-.07-1.53-.2-2.28H12v4.3h5.64c-.24 1.48-1.2 2.75-2.6 3.63v2.81h3.6a10.36 10.36 0 003.21-7.46z" clipRule="evenodd"/><path fillRule="evenodd" d="M12 22.5c2.98 0 5.46-1 7.25-2.72l-3.6-2.81c-.98.66-2.23 1.06-3.65 1.06-2.8 0-5.18-1.89-6.03-4.43H2.25v2.9C4.08 20.44 7.74 22.5 12 22.5z" clipRule="evenodd"/><path fillRule="evenodd" d="M5.97 13.9a6.37 6.37 0 010-3.8V7.2H2.25A10.46 10.46 0 001.5 12c0 1.61.38 3.14 1.05 4.51l3.72-2.9v-.71z" clipRule="evenodd"/><path fillRule="evenodd" d="M12 5.25c1.54 0 2.9.54 3.98 1.5l3.2-3.2A10.2 10.2 0 0012 1.5C7.74 1.5 4.08 3.56 2.25 7.2l3.72 2.9c.85-2.54 3.23-4.43 6.03-4.43z" clipRule="evenodd"/></svg>
                    Sign in with Google
                </button>
                
                <div className="relative">
                    <div className="absolute inset-0 flex items-center">
                        <div className="w-full border-t border-gray-300"></div>
                    </div>
                    <div className="relative flex justify-center text-sm">
                        <span className="px-2 bg-white text-gray-500">Or continue with</span>
                    </div>
                </div>

                <form onSubmit={handleEmailAuth} className="space-y-4">
                    <input type="email" value={email} onChange={e => setEmail(e.target.value)} placeholder="Email address" required className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring focus:ring-blue-200" />
                    <input type="password" value={password} onChange={e => setPassword(e.target.value)} placeholder="Password" required className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring focus:ring-blue-200" />
                    {error && <p className="text-sm text-red-600">{error}</p>}
                    <button type="submit" className="w-full py-2 px-4 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        {isSignUp ? 'Sign Up' : 'Sign In'}
                    </button>
                </form>

                <p className="text-sm text-center text-gray-600">
                    {isSignUp ? 'Already have an account?' : "Don't have an account?"}
                    <button onClick={() => setIsSignUp(!isSignUp)} className="ml-1 font-medium text-blue-600 hover:text-blue-500">
                        {isSignUp ? 'Sign In' : 'Sign Up'}
                    </button>
                </p>
            </div>
        </div>
    );
};

const AddIssueModal = ({ onClose, onSave, db, user, firebase, defaultValues }) => {
    const [formData, setFormData] = useState({
        title: '',
        problemDescription: '',
        solutionDescription: '',
        priority: defaultValues.priority[0] || 'Medium',
        assignedTo: '',
        technology: defaultValues.technology[0] || 'Electrical',
        dueDate: '',
    });
    const [isSaving, setIsSaving] = useState(false);

    const isSaveDisabled = !formData.title.trim() || !formData.problemDescription.trim() || isSaving;

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSave = async () => {
        if (isSaveDisabled) return;
        
        setIsSaving(true);
        const counterRef = firebase.doc(db, `/artifacts/${appId}/public/data/counters`, "issueCounter");
        const issuesCollectionRef = firebase.collection(db, `/artifacts/${appId}/public/data/issues`);

        try {
            const newDeviationNo = await firebase.runTransaction(db, async (transaction) => {
                const counterDoc = await transaction.get(counterRef);
                let nextVal = 1;
                if (!counterDoc.exists()) {
                    transaction.set(counterRef, { current: nextVal });
                } else {
                    nextVal = counterDoc.data().current + 1;
                    transaction.update(counterRef, { current: nextVal });
                }
                return nextVal;
            });

            await firebase.addDoc(issuesCollectionRef, {
                title: formData.title.trim(),
                problemDescription: formData.problemDescription.trim(),
                solutionDescription: formData.solutionDescription.trim(),
                priority: formData.priority,
                assignedTo: formData.assignedTo,
                technology: formData.technology,
                deviationNo: newDeviationNo,
                status: 'Open',
                author: user?.email || user?.displayName || 'Anonymous',
                authorId: user?.uid,
                createdAt: new Date().toISOString(),
                order: Date.now(),
                ...(formData.dueDate && { dueDate: new Date(formData.dueDate).toISOString() }),
            });
            
            onSave();
        } catch (e) {
            console.error("Transaction failed: ", e);
            alert("Failed to add issue. Please try again.");
            setIsSaving(false);
        }
    };
    
    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50 p-4">
            <div className="bg-white rounded-lg shadow-xl w-full max-w-lg p-6 animate-fade-in-up">
                <h2 className="text-xl font-bold text-gray-800 mb-4">Add New Deviation</h2>
                
                <div className="space-y-4 max-h-[80vh] overflow-y-auto pr-2">
                    <div className="form-field">
                        <label className="block text-sm font-medium text-gray-600">Title <span className="text-red-500">*</span></label>
                        <input name="title" value={formData.title} onChange={handleChange} type="text" className="mt-1 w-full" />
                    </div>
                    <div className="form-field">
                        <label className="block text-sm font-medium text-gray-600">Problem <span className="text-red-500">*</span></label>
                        <textarea name="problemDescription" value={formData.problemDescription} onChange={handleChange} rows="4" className="mt-1 w-full"></textarea>
                    </div>
                    <div className="form-field">
                        <label className="block text-sm font-medium text-gray-600">Solution</label>
                        <textarea name="solutionDescription" value={formData.solutionDescription} onChange={handleChange} rows="4" className="mt-1 w-full"></textarea>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                         <div className="form-field">
                            <label className="block text-sm font-medium text-gray-600">Priority</label>
                            <select name="priority" value={formData.priority} onChange={handleChange} className="mt-1 w-full">
                                {defaultValues.priority.map(p => <option key={p} value={p}>{p}</option>)}
                            </select>
                        </div>
                        <div className="form-field">
                            <label className="block text-sm font-medium text-gray-600">Technology</label>
                            <select name="technology" value={formData.technology} onChange={handleChange} className="mt-1 w-full">
                                {defaultValues.technology.map(t => <option key={t} value={t}>{t}</option>)}
                            </select>
                        </div>
                    </div>
                     <div className="form-field">
                        <label className="block text-sm font-medium text-gray-600">Assigned To</label>
                        <input list="assignedToList" onFocus={(e) => e.target.select()} name="assignedTo" value={formData.assignedTo} onChange={handleChange} type="text" placeholder="Select or type a name" className="mt-1 w-full" />
                        <datalist id="assignedToList">
                            {defaultValues.assignedTo.map(person => <option key={person.name} value={person.name} />)}
                        </datalist>
                    </div>
                    <div className="form-field">
                        <label className="block text-sm font-medium text-gray-600">Due</label>
                        <input name="dueDate" value={formData.dueDate} onChange={handleChange} type="date" className="mt-1 w-full" />
                    </div>
                </div>

                <div className="flex justify-end mt-6 space-x-3 pt-4 border-t">
                    <button onClick={onClose} className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300">Cancel</button>
                    <button onClick={handleSave} disabled={isSaveDisabled} className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed">
                        {isSaving ? 'Saving...' : 'Save Issue'}
                    </button>
                </div>
            </div>
        </div>
    );
};


const EditIssueModal = ({ issue, onClose, onSave, db, firebase, defaultValues }) => {
    const [formData, setFormData] = useState({
        title: issue.title,
        problemDescription: issue.problemDescription,
        solutionDescription: issue.solutionDescription || '',
        priority: issue.priority,
        assignedTo: issue.assignedTo,
        technology: issue.technology,
        status: issue.status,
        dueDate: issue.dueDate ? new Date(issue.dueDate).toISOString().split('T')[0] : '',
    });
    const [isSaving, setIsSaving] = useState(false);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSave = async () => {
        setIsSaving(true);
        const docRef = firebase.doc(db, `/artifacts/${appId}/public/data/issues`, issue.id);
        const updatedData = {
            ...formData,
            ...(formData.dueDate && { dueDate: new Date(formData.dueDate).toISOString() }),
        };

        try {
            await firebase.updateDoc(docRef, updatedData);
            onSave();
        } catch (e) {
            console.error("Error updating document: ", e);
            alert("Failed to update issue.");
            setIsSaving(false);
        }
    };
    
    return (
         <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50 p-4">
            <div className="bg-white rounded-lg shadow-xl w-full max-w-lg p-6 animate-fade-in-up">
                 <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-bold text-gray-800">Edit Deviation No: {issue.deviationNo}</h2>
                    <CopyLinkButton issueId={issue.id} />
                </div>
                <div className="space-y-4 max-h-[70vh] overflow-y-auto pr-2">
                   <div className="form-field">
                        <label>Title</label>
                        <input name="title" type="text" value={formData.title} onChange={handleChange} />
                    </div>
                    <div className="form-field">
                        <label>Problem</label>
                        <textarea name="problemDescription" value={formData.problemDescription} onChange={handleChange} rows="5"></textarea>
                    </div>
                     <div className="form-field">
                        <label>Solution</label>
                        <textarea name="solutionDescription" value={formData.solutionDescription} onChange={handleChange} rows="5" placeholder="Describe the solution..."></textarea>
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                        <div className="form-field">
                            <label>Progress</label>
                            <select name="status" value={formData.status} onChange={handleChange}>
                                <option>Open</option>
                                <option>Work In Progress</option>
                                <option>Closed</option>
                            </select>
                        </div>
                         <div className="form-field">
                            <label>Priority</label>
                            <select name="priority" value={formData.priority} onChange={handleChange}>
                                {defaultValues.priority.map(p => <option key={p} value={p}>{p}</option>)}
                            </select>
                        </div>
                    </div>
                     <div className="grid grid-cols-2 gap-4">
                        <div className="form-field">
                            <label>Technology</label>
                            <select name="technology" value={formData.technology} onChange={handleChange}>
                               {defaultValues.technology.map(t => <option key={t} value={t}>{t}</option>)}
                            </select>
                        </div>
                        <div className="form-field">
                            <label>Assigned To</label>
                            <input list="assignedToList" onFocus={(e) => e.target.select()} name="assignedTo" type="text" value={formData.assignedTo} onChange={handleChange} />
                            <datalist id="assignedToList">
                                {defaultValues.assignedTo.map(person => <option key={person.name} value={person.name} />)}
                            </datalist>
                        </div>
                    </div>
                    <div className="form-field">
                        <label>Due</label>
                        <input name="dueDate" type="date" value={formData.dueDate} onChange={handleChange} />
                    </div>
                </div>
                <div className="flex justify-end mt-6 space-x-3">
                    <button onClick={onClose} className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300">Cancel</button>
                    <button onClick={handleSave} disabled={isSaving} className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400">
                        {isSaving ? 'Saving...' : 'Save Changes'}
                    </button>
                </div>
            </div>
        </div>
    );
};


const IssueDetailPanel = ({ issue, db, firebase, defaultValues, onBack, isDesktop }) => {
    const [details, setDetails] = useState(issue);

    useEffect(() => {
        setDetails(issue);
    }, [issue]);

    const handleUpdate = (field, value) => {
        const updatedDetails = { ...details, [field]: value };
        setDetails(updatedDetails);
        
        const docRef = firebase.doc(db, `/artifacts/${appId}/public/data/issues`, issue.id);
        firebase.updateDoc(docRef, { [field]: value }).catch(e => console.error("Error updating doc: ", e));
    };

    return (
        <div className="h-full flex flex-col bg-gray-50">
            <div className="p-4 flex-shrink-0 flex items-center">
                {!isDesktop && (
                    <button onClick={onBack} className="mr-4 p-2 rounded-full hover:bg-gray-200">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" /></svg>
                    </button>
                )}
                <h3 className="text-lg font-bold text-gray-800 flex-grow">Deviation No: {details.deviationNo}</h3>
                <CopyLinkButton issueId={issue.id} />
            </div>
           
            <div className="overflow-y-auto space-y-4 px-4 pb-4 border-t">
                <div className="form-field">
                    <label>Progress</label>
                    <select value={details.status} onChange={(e) => handleUpdate('status', e.target.value)}>
                        <option>Open</option>
                        <option>Work In Progress</option>
                        <option>Closed</option>
                    </select>
                </div>
                <div className="form-field">
                    <label>Title</label>
                    <input type="text" value={details.title} onChange={(e) => handleUpdate('title', e.target.value)} />
                </div>
                <div className="form-field">
                    <label>Problem</label>
                    <textarea value={details.problemDescription} onChange={(e) => handleUpdate('problemDescription', e.target.value)} rows="5"></textarea>
                </div>
                <div className="form-field">
                    <label>Solution</label>
                    <textarea value={details.solutionDescription || ''} onChange={(e) => handleUpdate('solutionDescription', e.target.value)} rows="5" placeholder="Describe the solution..."></textarea>
                </div>
                 <div className="grid grid-cols-2 gap-4">
                    <div className="form-field">
                        <label>Priority</label>
                        <select value={details.priority} onChange={(e) => handleUpdate('priority', e.target.value)}>
                             {defaultValues.priority.map(p => <option key={p} value={p}>{p}</option>)}
                        </select>
                    </div>
                    <div className="form-field">
                        <label>Technology</label>
                        <select value={details.technology} onChange={(e) => handleUpdate('technology', e.target.value)}>
                           {defaultValues.technology.map(t => <option key={t} value={t}>{t}</option>)}
                        </select>
                    </div>
                </div>
                 <div className="grid grid-cols-2 gap-4">
                    <div className="form-field">
                        <label>Created by</label>
                        <input type="text" readOnly value={details.author} className="bg-gray-200" />
                    </div>
                    <div className="form-field">
                        <label>Assigned To</label>
                         <input list="assignedToListPanel" onFocus={(e) => e.target.select()} name="assignedTo" type="text" value={details.assignedTo} onChange={(e) => handleUpdate('assignedTo', e.target.value)} />
                         <datalist id="assignedToListPanel">
                             {defaultValues.assignedTo.map(person => <option key={person.name} value={person.name} />)}
                         </datalist>
                    </div>
                </div>
                <div className="form-field">
                    <label>Due</label>
                    <input type="date" value={details.dueDate ? new Date(details.dueDate).toISOString().split('T')[0] : ''} onChange={(e) => handleUpdate('dueDate', e.target.value ? new Date(e.target.value).toISOString() : null)} />
                </div>
            </div>
        </div>
    );
};

const ColumnToggle = ({ columns, setColumns }) => {
    const [isOpen, setIsOpen] = useState(false);
    const dropdownRef = useRef(null);

    const toggleColumn = (id) => {
        const newColumns = columns.map(c => c.id === id ? { ...c, isVisible: !c.isVisible } : c);
        setColumns(newColumns);
    };

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
                setIsOpen(false);
            }
        };
        document.addEventListener("mousedown", handleClickOutside);
        return () => document.removeEventListener("mousedown", handleClickOutside);
    }, []);

    return (
        <div className="relative" ref={dropdownRef}>
            <button onClick={() => setIsOpen(!isOpen)} className="px-4 py-2 bg-white border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 text-xs font-bold">
                Columns
            </button>
            {isOpen && (
                <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg z-20">
                    <ul className="py-1">
                        {columns.map(col => (
                            <li key={col.id} className="px-3 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                <label className="flex items-center space-x-2 cursor-pointer">
                                    <input type="checkbox" checked={col.isVisible} onChange={() => toggleColumn(col.id)} />
                                    <span>{col.label}</span>
                                </label>
                            </li>
                        ))}
                    </ul>
                </div>
            )}
        </div>
    );
};

const AssignedToValueManager = ({ values, setValues }) => {
    const [newName, setNewName] = useState('');
    const [newEmail, setNewEmail] = useState('');

    const handleAdd = () => {
        if (!newName.trim()) {
            alert("Name is required.");
            return;
        }
        if (values.find(p => p.name.toLowerCase() === newName.trim().toLowerCase())) {
            alert("This name already exists.");
            return;
        }

        const newPerson = { name: newName.trim(), email: newEmail.trim() };
        setValues([...values, newPerson]);
        setNewName('');
        setNewEmail('');
    };

    const handleRemove = (nameToRemove) => {
        setValues(values.filter(p => p.name !== nameToRemove));
    };

    return (
        <div>
            <h3 className="text-lg font-semibold text-gray-700 mb-2">Assigned To</h3>
            <div className="space-y-2 mb-2 p-2 border rounded-md">
                <input type="text" value={newName} onChange={(e) => setNewName(e.target.value)} placeholder="Name (Required)" className="w-full" />
                <input type="email" value={newEmail} onChange={(e) => setNewEmail(e.target.value)} placeholder="Email (Optional)" className="w-full" />
                <button onClick={handleAdd} className="w-full px-3 py-1 bg-green-500 text-white rounded-md text-sm hover:bg-green-600">Add Person</button>
            </div>
            <ul className="space-y-1 max-h-40 overflow-y-auto border rounded-md p-2 bg-gray-50">
                {values.map(person => (
                    <li key={person.name} className="flex justify-between items-center text-sm p-1 bg-white rounded">
                        <div>
                            <p className="font-semibold">{person.name}</p>
                            {person.email && <p className="text-xs text-gray-500">{person.email}</p>}
                        </div>
                        <button onClick={() => handleRemove(person.name)} className="text-red-500 hover:text-red-700 text-xs">Remove</button>
                    </li>
                ))}
            </ul>
        </div>
    );
};

const ValueManager = ({ field, title, newValues, onNewValueChange, values, onAdd, onRemove }) => (
    <div>
        <h3 className="text-lg font-semibold text-gray-700 mb-2">{title}</h3>
        <div className="flex space-x-2 mb-2">
            <input 
                type="text" 
                value={newValues[field]}
                onChange={(e) => onNewValueChange(field, e.target.value)}
                placeholder={`New ${title}...`}
                className="flex-grow"
            />
            <button onClick={() => onAdd(field)} className="px-3 py-1 bg-green-500 text-white rounded-md text-sm hover:bg-green-600">Add</button>
        </div>
        <ul className="space-y-1 max-h-40 overflow-y-auto border rounded-md p-2 bg-gray-50">
            {values[field].map(value => (
                <li key={value} className="flex justify-between items-center text-sm p-1 bg-white rounded">
                    <span>{value}</span>
                    <button onClick={() => onRemove(field, value)} className="text-red-500 hover:text-red-700 text-xs">Remove</button>
                </li>
            ))}
        </ul>
    </div>
);

const DefaultValuesModal = ({ onClose, defaultValues, db, firebase }) => {
    const [localDefaults, setLocalDefaults] = useState(defaultValues);
    const [newValues, setNewValues] = useState({ priority: '', technology: '' });
    const [isSaving, setIsSaving] = useState(false);

    const handleGenericAdd = (field) => {
        const newValue = newValues[field].trim();
        if (newValue && !localDefaults[field].includes(newValue)) {
            setLocalDefaults(prev => ({ ...prev, [field]: [...prev[field], newValue] }));
            setNewValues(prev => ({ ...prev, [field]: '' }));
        }
    };
    
    const handleGenericRemove = (field, valueToRemove) => {
        setLocalDefaults(prev => ({ ...prev, [field]: prev[field].filter(v => v !== valueToRemove) }));
    };
    
    const handleGenericNewValueChange = (field, value) => {
        setNewValues(prev => ({ ...prev, [field]: value }));
    };

    const setAssignedTo = (newAssignedToArray) => {
        setLocalDefaults(prev => ({ ...prev, assignedTo: newAssignedToArray }));
    };

    const handleSave = async () => {
        setIsSaving(true);
        const docRef = firebase.doc(db, `/artifacts/${appId}/public/data/defaultValues`, 'config');
        try {
            await firebase.setDoc(docRef, localDefaults, { merge: true });
            onClose();
        } catch (e) {
            console.error("Error saving default values: ", e);
            alert("Failed to save default values.");
        } finally {
            setIsSaving(false);
        }
    };

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50 p-4">
            <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl p-6 animate-fade-in-up">
                <h2 className="text-xl font-bold text-gray-800 mb-4">Manage Default Values</h2>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <AssignedToValueManager values={localDefaults.assignedTo} setValues={setAssignedTo} />
                    <ValueManager 
                        field="priority" 
                        title="Priority" 
                        newValues={newValues}
                        onNewValueChange={handleGenericNewValueChange}
                        values={localDefaults}
                        onAdd={handleGenericAdd}
                        onRemove={handleGenericRemove}
                    />
                    <ValueManager 
                        field="technology" 
                        title="Technology" 
                        newValues={newValues}
                        onNewValueChange={handleGenericNewValueChange}
                        values={localDefaults}
                        onAdd={handleGenericAdd}
                        onRemove={handleGenericRemove}
                    />
                </div>
                <div className="flex justify-end mt-6 space-x-3">
                    <button onClick={onClose} className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300">Cancel</button>
                    <button onClick={handleSave} disabled={isSaving} className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-gray-400">
                        {isSaving ? 'Saving...' : 'Save Defaults'}
                    </button>
                </div>
            </div>
        </div>
    );
};

const IssueCard = ({ issue, onClick, isSelected, columns, defaultValues, ...props }) => {
    const visibleColumns = columns.filter(c => c.isVisible && c.id !== 'title' && c.id !== 'deviationNo');
    
    return (
        <div onClick={onClick} className={`bg-white p-4 rounded-lg shadow cursor-pointer border hover:border-blue-500 relative ${isSelected ? 'border-blue-500 ring-2 ring-blue-300' : 'border-gray-200'}`} {...props}>
             <div className="absolute top-1 right-1 z-10">
                <CopyLinkButton issueId={issue.id} />
            </div>
            <div className="flex justify-between items-start mb-2">
                <h3 className="font-bold text-gray-800 pr-10 truncate">{issue.title}</h3>
                <span className="font-bold text-gray-500 text-lg flex-shrink-0">#{issue.deviationNo}</span>
            </div>
            <div className="flex flex-wrap items-center gap-x-4 gap-y-2 text-xs">
                {visibleColumns.map(col => {
                    const value = issue[col.id] || '--';
                    if (col.id === 'status') {
                        return <span key={col.id} className={`px-2 py-1 inline-flex leading-5 font-semibold rounded-full ${getStatusClass(value)}`}>{value}</span>
                    }
                    if (col.id === 'priority') {
                         return <span key={col.id} className={getPriorityClass(value)}>{value}</span>
                    }
                     if (col.id === 'assignedTo') {
                         return <span key={col.id} className="text-gray-600"><strong className="font-medium text-gray-800">{col.label}:</strong> <span className={getAssignedToClass(value, defaultValues.assignedTo)}>{value}</span></span>
                    }
                    if (col.id === 'dueDate') {
                         const dueDateInfo = getDueDateInfo(value);
                         return <span key={col.id} className="text-gray-600"><strong className="font-medium text-gray-800">{col.label}:</strong> <span className={dueDateInfo.className}>{value ? new Date(value).toLocaleDateString() : '--'}</span></span>
                    }
                     if (col.id === 'createdAt') {
                         return <span key={col.id} className="text-gray-600"><strong className="font-medium text-gray-800">{col.label}:</strong> {value ? new Date(value).toLocaleDateString() : '--'}</span>
                    }
                    if (col.id === 'dueIn') {
                         const dueDateInfo = getDueDateInfo(issue.dueDate);
                         return <span key={col.id} className="text-gray-600"><strong className="font-medium text-gray-800">{col.label}:</strong> <span className={dueDateInfo.className}>{issue.dueDate ? `${dueDateInfo.days}D` : '--'}</span></span>
                    }
                    return <span key={col.id} className="text-gray-600"><strong className="font-medium text-gray-800">{col.label}:</strong> {value}</span>;
                })}
            </div>
        </div>
    );
};


// --- Main App Component ---
export default function App() {
    // Firebase state
    const [firebase, setFirebase] = useState(null);
    const [auth, setAuth] = useState(null);
    const [db, setDb] = useState(null);
    const [user, setUser] = useState(null);
    const [authReady, setAuthReady] = useState(false);

    // App state
    const [issues, setIssues] = useState([]);
    const [selectedIssue, setSelectedIssue] = useState(null);
    const [editingIssue, setEditingIssue] = useState(null);
    const [isAddModalOpen, setIsAddModalOpen] = useState(false);
    const [isDefaultsModalOpen, setIsDefaultsModalOpen] = useState(false);
    const [loading, setLoading] = useState(true);
    const [defaultValues, setDefaultValues] = useState({
        assignedTo: [{ name: 'Unknown', email: '' }],
        priority: ['Low', 'Medium', 'High'],
        technology: ['Electrical', 'Mechanical', 'Software', 'Civil'],
    });
    
    // UI state
    const [columns, setColumns] = useState(null);
    const isDesktop = useMediaQuery('(min-width: 768px)');
    
    const [isDetailPanelVisible, setIsDetailPanelVisible] = useState(true);

    const [panelWidth, setPanelWidth] = useState(() => {
        const savedWidth = localStorage.getItem('issueTrackerPanelWidth');
        return savedWidth ? parseInt(savedWidth, 10) : window.innerWidth * 0.6;
    });

    const isResizing = useRef(false);
    const dragItem = useRef();
    const dragOverItem = useRef();
    const [dragOverIndex, setDragOverIndex] = useState(null);

    // Save UI settings to local storage
    useEffect(() => {
        if (user && columns) {
            localStorage.setItem(`issueTrackerColumns_${user.uid}`, JSON.stringify(columns));
        }
    }, [columns, user]);

    useEffect(() => {
        localStorage.setItem('issueTrackerPanelWidth', panelWidth);
    }, [panelWidth]);

    // --- Firebase Initialization and Auth ---
    useEffect(() => {
        const loadFirebaseModules = async () => {
            try {
                const { initializeApp } = await import("https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js");
                const authMethods = await import("https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js");
                const firestoreMethods = await import("https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js");
                setFirebase({ initializeApp, ...authMethods, ...firestoreMethods });
            } catch (error) {
                console.error("Firebase modules loading failed:", error);
                setLoading(false);
            }
        };
        loadFirebaseModules();
    }, []);

    useEffect(() => {
        if (firebase && !auth) {
            const app = firebase.initializeApp(firebaseConfig);
            const authInstance = firebase.getAuth(app);
            const dbInstance = firebase.getFirestore(app);
            setAuth(authInstance);
            setDb(dbInstance);

            const unsubscribe = firebase.onAuthStateChanged(authInstance, async (currentUser) => {
                setUser(currentUser);
                if(!currentUser && initialAuthToken) {
                     try {
                        await firebase.signInWithCustomToken(authInstance, initialAuthToken);
                    } catch (error) {
                       console.error("Token sign-in failed:", error);
                    }
                }
                setAuthReady(true);
            });
            return () => unsubscribe();
        }
    }, [firebase]);
    
    // Load user-specific column settings or set defaults
    useEffect(() => {
        if (user) {
            const savedColumns = localStorage.getItem(`issueTrackerColumns_${user.uid}`);
            if (savedColumns) {
                setColumns(JSON.parse(savedColumns));
            } else {
                setColumns([
                    { id: 'deviationNo', label: '#', isVisible: true },
                    { id: 'title', label: 'Title', isVisible: true },
                    { id: 'author', label: 'Created by', isVisible: false },
                    { id: 'priority', label: 'Priority', isVisible: true },
                    { id: 'status', label: 'Progress', isVisible: true },
                    { id: 'assignedTo', label: 'Assigned To', isVisible: true },
                    { id: 'problemDescription', label: 'Problem', isVisible: false },
                    { id: 'solutionDescription', label: 'Solution', isVisible: false },
                    { id: 'technology', label: 'Technology', isVisible: false },
                    { id: 'dueDate', label: 'Due', isVisible: false },
                    { id: 'dueIn', label: 'Due In', isVisible: true },
                    { id: 'createdAt', label: 'Created', isVisible: false },
                ]);
            }
        }
    }, [user]);


    // --- Data Fetching ---
    useEffect(() => {
        if (db && user) {
            const issuesCollectionRef = firebase.collection(db, `/artifacts/${appId}/public/data/issues`);
            const defaultsDocRef = firebase.doc(db, `/artifacts/${appId}/public/data/defaultValues`, 'config');
            
            const q = firebase.query(issuesCollectionRef, firebase.orderBy('order', 'asc'));
            
            const unsubscribeIssues = firebase.onSnapshot(q, (snapshot) => {
                const issuesData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                setIssues(issuesData); // Raw issues
                setLoading(false);
            }, (error) => { console.error("Error fetching issues:", error); setLoading(false); });

            const unsubscribeDefaults = firebase.onSnapshot(defaultsDocRef, (doc) => {
                if (doc.exists()) {
                    const data = doc.data();

                    // Data migration: Check if assignedTo is an array of strings and convert to objects
                    let assignedToArray = data.assignedTo || [];
                    if (assignedToArray.length > 0 && typeof assignedToArray[0] === 'string') {
                        assignedToArray = assignedToArray.map(name => ({ name: name, email: '' }));
                    }

                    setDefaultValues({
                        assignedTo: assignedToArray,
                        priority: data.priority || [],
                        technology: data.technology || [],
                    });
                } else {
                    firebase.setDoc(defaultsDocRef, defaultValues);
                }
            });

            return () => {
                unsubscribeIssues();
                unsubscribeDefaults();
            };
        } else if (!user) {
             setIssues([]);
             setLoading(false);
        }
    }, [db, user]);

    // Handle URL hash on initial load
    useEffect(() => {
        if(issues.length > 0) {
            const hash = window.location.hash;
            if(hash.startsWith('#issue/')) {
                const issueId = hash.substring(7);
                const issueFromUrl = issues.find(i => i.id === issueId);
                if (issueFromUrl) {
                    setSelectedIssue(issueFromUrl);
                    window.history.replaceState(null, null, ' ');
                }
            }
        }
    }, [issues]);

    const handleSignOut = () => { firebase.signOut(auth); };
    
    const handleMouseMove = useCallback((e) => {
        if (!isResizing.current) return;
        const totalWidth = window.innerWidth;
        const newWidth = Math.max(300, Math.min(e.clientX, totalWidth - 300));
        setPanelWidth(newWidth);
    }, []);

    const handleMouseUp = useCallback(() => {
        isResizing.current = false;
        window.removeEventListener('mousemove', handleMouseMove);
        window.removeEventListener('mouseup', handleMouseUp);
    }, [handleMouseMove]);

    const handleMouseDown = useCallback((e) => {
        isResizing.current = true;
        window.addEventListener('mousemove', handleMouseMove);
        window.addEventListener('mouseup', handleMouseUp);
    }, [handleMouseMove, handleMouseUp]);
    
    const handleColumnDragSort = () => {
        if (dragCol.current === null || dragOverCol.current === null) return;
        const newColumns = [...columns];
        const dragged = newColumns.splice(dragCol.current, 1)[0];
        newColumns.splice(dragOverCol.current, 0, dragged);
        dragCol.current = null;
        dragOverCol.current = null;
        setColumns(newColumns);
    };

    const handleDragStart = (e, index) => {
        dragItem.current = index;
    };

    const handleDragEnter = (e, index) => {
        dragOverItem.current = index;
        setDragOverIndex(index);
    };

    const handleDragEnd = async () => {
        const draggedIndex = dragItem.current;
        const dropIndex = dragOverItem.current;
        setDragOverIndex(null);
        dragItem.current = null;
        dragOverItem.current = null;

        if (draggedIndex === dropIndex || draggedIndex === undefined || dropIndex === undefined) return;

        const reorderedIssues = [...issues];
        const draggedIssue = reorderedIssues.splice(draggedIndex, 1)[0];
        reorderedIssues.splice(dropIndex, 0, draggedIssue);
        
        const updatePromises = reorderedIssues.map((issue, index) => {
            const issueRef = firebase.doc(db, `/artifacts/${appId}/public/data/issues`, issue.id);
            return firebase.updateDoc(issueRef, { order: index });
        });

        await Promise.all(updatePromises);
    };
    
    // --- Render Logic ---
    if (!authReady || !firebase || !columns) {
        return <div className="flex items-center justify-center h-screen bg-gray-100"><h1 className="text-2xl font-bold text-gray-700">Loading Application...</h1></div>;
    }
    
    if (!user) {
        return <LoginScreen auth={auth} firebase={firebase} />;
    }

    return (
        <div className="flex flex-col h-screen bg-white font-sans text-sm text-gray-800 overflow-hidden">
            <style>{`
                .form-field label { display: block; font-size: 0.75rem; font-weight: 600; color: #4B5563; margin-bottom: 4px; }
                .form-field input, .form-field select, .form-field textarea { width: 100%; padding: 8px; border: 1px solid #D1D5DB; border-radius: 0.375rem; background-color: #F9FAFB; transition: border-color 0.2s; }
                .form-field input:focus, .form-field select:focus, .form-field textarea:focus { outline: none; border-color: #3B82F6; box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.4); }
                @keyframes fade-in-up { 0% { opacity: 0; transform: translateY(20px); } 100% { opacity: 1; transform: translateY(0); } }
                .animate-fade-in-up { animation: fade-in-up 0.3s ease-out forwards; }
                .drag-over-indicator { border-top: 2px solid #3B82F6; }
            `}</style>

            <header className="flex items-center justify-between p-4 border-b border-gray-200 flex-shrink-0 z-20 flex-wrap">
                <div className="flex items-center space-x-2 sm:space-x-4 mb-2 sm:mb-0">
                     <h1 className="text-xl font-bold text-gray-800">Deviations</h1>
                     <button onClick={() => setIsAddModalOpen(true)} className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-xs font-bold">ADD ISSUE</button>
                     <ColumnToggle columns={columns} setColumns={setColumns} />
                     <button onClick={() => setIsDefaultsModalOpen(true)} className="px-4 py-2 bg-white border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 text-xs font-bold">Defaults</button>
                </div>
                <div className="flex items-center space-x-2 sm:space-x-4">
                    {isDesktop && <button onClick={() => setIsDetailPanelVisible(!isDetailPanelVisible)} title="Toggle Details Panel" className="p-2 bg-white border border-gray-300 rounded-md text-gray-600 hover:bg-gray-50">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                        </svg>
                    </button>}
                    <button onClick={handleSignOut} className="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 text-xs font-bold">SIGN OUT</button>
                </div>
            </header>
            
            <div className="flex flex-1 min-h-0">
                <main className={`flex-col min-w-0 ${isDesktop || !selectedIssue ? 'flex' : 'hidden'}`} style={{ width: isDesktop && isDetailPanelVisible ? `${panelWidth}px` : '100%' }}>
                    <div className="hidden md:block flex-grow overflow-y-auto">
                        <table className="min-w-full divide-y divide-gray-200">
                            <thead className="bg-gray-50 sticky top-0 z-10">
                                <tr>
                                    {columns.filter(c => c.isVisible).map((col, i) => (
                                        <th key={col.id}
                                            className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                                        >
                                            <div draggable onDragStart={(e) => { e.dataTransfer.setData("text/plain", ""); dragCol.current = i }} onDragEnter={() => dragOverCol.current = i} onDragEnd={handleColumnDragSort} onDragOver={(e) => e.preventDefault()} className="cursor-move">
                                                {col.label}
                                            </div>
                                        </th>
                                    ))}
                                </tr>
                            </thead>
                            <tbody className="bg-white divide-y divide-gray-200">
                                {loading ? (
                                    <tr><td colSpan={columns.filter(c => c.isVisible).length} className="text-center py-10">Loading issues...</td></tr>
                                ) : issues.map((issue, index) => (
                                    <tr key={issue.id} 
                                        draggable
                                        onDragStart={(e) => handleDragStart(e, index)}
                                        onDragEnter={(e) => handleDragEnter(e, index)}
                                        onDragEnd={handleDragEnd}
                                        onDragOver={(e) => e.preventDefault()}
                                        onClick={() => setSelectedIssue(issue)} 
                                        onDoubleClick={() => setEditingIssue(issue)}
                                        className={`cursor-pointer hover:bg-blue-50 ${selectedIssue?.id === issue.id ? 'bg-blue-100' : ''} ${dragOverIndex === index ? 'drag-over-indicator' : ''}`}>
                                        {columns.filter(c => c.isVisible).map(col => (
                                            <td key={col.id} className="px-4 py-2 whitespace-nowrap">
                                                 {col.id === 'dueDate' ? (
                                                    <span className={getDueDateInfo(issue.dueDate).className}>
                                                        {issue.dueDate ? new Date(issue.dueDate).toLocaleDateString() : '--'}
                                                    </span>
                                                ) : col.id === 'dueIn' ? (
                                                     <span className={getDueDateInfo(issue.dueDate).className}>
                                                        {issue.dueDate ? `${getDueDateInfo(issue.dueDate).days}D` : '--'}
                                                    </span>
                                                ) : col.id === 'status' ? (
                                                    <span className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusClass(issue.status)}`}>{issue.status}</span>
                                                ) : col.id === 'priority' ? (
                                                    <span className={getPriorityClass(issue.priority)}>{issue.priority}</span>
                                                ) : col.id === 'createdAt' ? (
                                                     issue[col.id] ? new Date(issue[col.id]).toLocaleString() : '--'
                                                ) : col.id === 'assignedTo' ? (
                                                    <span className={getAssignedToClass(issue.assignedTo, defaultValues.assignedTo)}>{issue.assignedTo || '--'}</span>
                                                ) : col.id === 'title' || col.id === 'problemDescription' || col.id === 'solutionDescription' ? (
                                                    <span className="max-w-xs block truncate">{issue[col.id]}</span>
                                                ) : (
                                                    issue[col.id] || '--'
                                                )}
                                            </td>
                                        ))}
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                    <div className="block md:hidden flex-grow overflow-y-auto p-2 space-y-2 bg-gray-100">
                         {loading ? <p className="text-center py-10">Loading issues...</p> : issues.map((issue, index) => (
                            <div key={issue.id} 
                                 className={dragOverIndex === index ? 'drag-over-indicator' : ''}
                                 onDragStart={(e) => handleDragStart(e, index)}
                                 onDragEnter={(e) => handleDragEnter(e, index)}
                                 onDragEnd={handleDragEnd}
                                 onDragOver={(e) => e.preventDefault()}
                            >
                                <IssueCard
                                    issue={issue}
                                    onClick={() => setSelectedIssue(issue)}
                                    isSelected={selectedIssue?.id === issue.id}
                                    columns={columns}
                                    defaultValues={defaultValues}
                                    draggable
                                />
                             </div>
                        ))}
                    </div>
                </main>

                {isDesktop && isDetailPanelVisible && (
                    <>
                        <div onMouseDown={handleMouseDown} className="w-2 cursor-col-resize flex-shrink-0 bg-gray-200 hover:bg-blue-500 transition-colors"></div>
                        <div className="flex-1 min-w-[300px] flex flex-col">
                           {selectedIssue && <IssueDetailPanel issue={selectedIssue} db={db} firebase={firebase} defaultValues={defaultValues} isDesktop={true} />}
                        </div>
                    </>
                )}
                 {!isDesktop && selectedIssue && (
                    <div className="w-full h-full">
                       <IssueDetailPanel 
                           issue={selectedIssue} 
                           db={db} 
                           firebase={firebase} 
                           defaultValues={defaultValues} 
                           isDesktop={false}
                           onBack={() => setSelectedIssue(null)}
                       />
                    </div>
                )}
            </div>
            
            {isAddModalOpen && <AddIssueModal onClose={() => setIsAddModalOpen(false)} onSave={() => setIsAddModalOpen(false)} db={db} user={user} firebase={firebase} defaultValues={defaultValues} />}
            {editingIssue && <EditIssueModal issue={editingIssue} onClose={() => setEditingIssue(null)} onSave={() => setEditingIssue(null)} db={db} firebase={firebase} defaultValues={defaultValues} />}
            {isDefaultsModalOpen && <DefaultValuesModal onClose={() => setIsDefaultsModalOpen(false)} defaultValues={defaultValues} db={db} firebase={firebase} />}
        </div>
    );
}

